{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static Status = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.initialState = initialState;\n        this.state = JSON.parse(JSON.stringify(initialState));\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.getStatus() === $a5fd07fa01589658$var$Game.Status.playing) {\n            const newState = [];\n            for(let r = 0; r < this.state.length; r++){\n                let row = this.state[r];\n                row = this.move(row);\n                newState[r] = row;\n            }\n            if (this.checkPossibilityOfMerging(newState)) {\n                this.state = [\n                    ...newState\n                ];\n                this.checkIsWin();\n                this.putNewGameNumber();\n            }\n            this.checkStatusLose(newState);\n        }\n    }\n    moveRight() {\n        if (this.getStatus() === $a5fd07fa01589658$var$Game.Status.playing) {\n            const newState = [];\n            for(let r = 0; r < this.state.length; r++){\n                let row = [\n                    ...this.state[r]\n                ];\n                row.reverse();\n                row = this.move(row);\n                row.reverse();\n                newState[r] = row;\n            }\n            if (this.checkPossibilityOfMerging(newState)) {\n                this.state = [\n                    ...newState\n                ];\n                this.checkIsWin();\n                this.putNewGameNumber();\n            }\n            this.checkStatusLose(newState);\n        }\n    }\n    moveUp() {\n        if (this.getStatus() === $a5fd07fa01589658$var$Game.Status.playing) {\n            const newState = [\n                ...Array(4)\n            ].map(()=>Array(4).fill(0));\n            for(let c = 0; c < this.state.length; c++){\n                let row = [\n                    this.state[0][c],\n                    this.state[1][c],\n                    this.state[2][c],\n                    this.state[3][c]\n                ];\n                row = this.move(row);\n                for(let r = 0; r < this.state.length; r++)newState[r][c] = row[r];\n            }\n            if (this.checkPossibilityOfMerging(newState)) {\n                this.state = [\n                    ...newState\n                ];\n                this.checkIsWin();\n                this.putNewGameNumber();\n            }\n            this.checkStatusLose(newState);\n        }\n    }\n    moveDown() {\n        if (this.getStatus() === $a5fd07fa01589658$var$Game.Status.playing) {\n            const newState = [\n                ...Array(4)\n            ].map(()=>Array(4).fill(0));\n            for(let c = 0; c < this.state.length; c++){\n                let row = [\n                    this.state[0][c],\n                    this.state[1][c],\n                    this.state[2][c],\n                    this.state[3][c]\n                ].reverse();\n                row = this.move(row);\n                row = row.reverse();\n                for(let r = 0; r < this.state.length; r++)newState[r][c] = row[r];\n            }\n            if (this.checkPossibilityOfMerging(newState)) {\n                this.state = [\n                    ...newState\n                ];\n                this.checkIsWin();\n                this.putNewGameNumber();\n            }\n            this.checkStatusLose(newState);\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.Status.playing;\n        this.putNewGameNumber();\n        this.putNewGameNumber();\n    }\n    restart() {\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n    }\n    checkIsWin() {\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.Status.win;\n                return;\n            }\n        }\n    }\n    checkPossibilityOfMerging(newState) {\n        return JSON.stringify(this.state) !== JSON.stringify(newState);\n    }\n    checkPossibilityOfMoving() {\n        const lengthOfArray = this.state.length;\n        for(let i = 0; i < lengthOfArray; i++)for(let j = 0; j < lengthOfArray; j++){\n            if (j < lengthOfArray - 1 && this.state[i][j] === this.state[i][j + 1]) return true;\n            if (i < lengthOfArray - 1 && this.state[i][j] === this.state[i + 1][j]) return true;\n        }\n        return false;\n    }\n    checkStatusLose() {\n        if (this.getEmptyCells().length === 0 && !this.checkPossibilityOfMoving()) this.status = $a5fd07fa01589658$var$Game.Status.lose;\n    }\n    move(row) {\n        const fillRow = row.filter((num)=>num !== 0);\n        for(let i = 0; i < fillRow.length - 1; i++)if (fillRow[i] === fillRow[i + 1]) {\n            fillRow[i] *= 2;\n            fillRow[i + 1] = 0;\n            this.score += fillRow[i];\n        }\n        const newFillRow = fillRow.filter((num)=>num !== 0);\n        while(newFillRow.length < 4)newFillRow.push(0);\n        return newFillRow;\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        return emptyCells;\n    }\n    putNewGameNumber() {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length !== 0) {\n            const getRandomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n            const row = emptyCells[getRandomEmptyCell][0];\n            const column = emptyCells[getRandomEmptyCell][1];\n            this.state[row][column] = Math.random() >= 0.9 ? 4 : 2;\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (e)=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$button.classList.replace(\"start\", \"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateGameField();\n    } else {\n        $09e991522ca7e64e$var$button.classList.replace(\"restart\", \"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateGameField();\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.Status.lose) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.Status.win) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$updateGameField();\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n});\nfunction $09e991522ca7e64e$var$updateGameField() {\n    const rows = [\n        ...document.querySelectorAll(\".field-row\")\n    ];\n    const cells = rows.map((row)=>[\n            ...row.children\n        ]);\n    const state = $09e991522ca7e64e$var$game.getState();\n    state.forEach((row, i)=>{\n        row.forEach((cell, j)=>{\n            const currentCell = cells[i][j];\n            currentCell.className = !cell ? \"field-cell\" : `field-cell field-cell--${cell}`;\n            currentCell.innerHTML = !cell ? \"\" : cell;\n        });\n    });\n}\n\n\n//# sourceMappingURL=index.087de41b.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.start');\nconst score = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', (e) => {\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n\n    game.start();\n    updateGameField();\n  } else {\n    button.classList.replace('restart', 'start');\n    button.textContent = 'Start';\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n\n    game.restart();\n    updateGameField();\n    score.textContent = game.getScore();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  if (game.getStatus() === Game.Status.lose) {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === Game.Status.win) {\n    messageWin.classList.remove('hidden');\n  }\n\n  updateGameField();\n\n  score.textContent = game.getScore();\n});\n\nfunction updateGameField() {\n  const rows = [...document.querySelectorAll('.field-row')];\n  const cells = rows.map((row) => [...row.children]);\n\n  const state = game.getState();\n\n  state.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      const currentCell = cells[i][j];\n\n      currentCell.className = !cell\n        ? 'field-cell'\n        : `field-cell field-cell--${cell}`;\n      currentCell.innerHTML = !cell ? '' : cell;\n    });\n  });\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  static Status = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = Game.Status.idle;\n    this.initialState = initialState;\n    this.state = JSON.parse(JSON.stringify(initialState));\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.getStatus() === Game.Status.playing) {\n      const newState = [];\n\n      for (let r = 0; r < this.state.length; r++) {\n        let row = this.state[r];\n\n        row = this.move(row);\n        newState[r] = row;\n      }\n\n      if (this.checkPossibilityOfMerging(newState)) {\n        this.state = [...newState];\n        this.checkIsWin();\n        this.putNewGameNumber();\n      }\n\n      this.checkStatusLose(newState);\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() === Game.Status.playing) {\n      const newState = [];\n\n      for (let r = 0; r < this.state.length; r++) {\n        let row = [...this.state[r]];\n\n        row.reverse();\n\n        row = this.move(row);\n\n        row.reverse();\n\n        newState[r] = row;\n      }\n\n      if (this.checkPossibilityOfMerging(newState)) {\n        this.state = [...newState];\n        this.checkIsWin();\n        this.putNewGameNumber();\n      }\n\n      this.checkStatusLose(newState);\n    }\n  }\n\n  moveUp() {\n    if (this.getStatus() === Game.Status.playing) {\n      const newState = [...Array(4)].map(() => Array(4).fill(0));\n\n      for (let c = 0; c < this.state.length; c++) {\n        let row = [\n          this.state[0][c],\n          this.state[1][c],\n          this.state[2][c],\n          this.state[3][c],\n        ];\n\n        row = this.move(row);\n\n        for (let r = 0; r < this.state.length; r++) {\n          newState[r][c] = row[r];\n        }\n      }\n\n      if (this.checkPossibilityOfMerging(newState)) {\n        this.state = [...newState];\n        this.checkIsWin();\n        this.putNewGameNumber();\n      }\n\n      this.checkStatusLose(newState);\n    }\n  }\n\n  moveDown() {\n    if (this.getStatus() === Game.Status.playing) {\n      const newState = [...Array(4)].map(() => Array(4).fill(0));\n\n      for (let c = 0; c < this.state.length; c++) {\n        let row = [\n          this.state[0][c],\n          this.state[1][c],\n          this.state[2][c],\n          this.state[3][c],\n        ].reverse();\n\n        row = this.move(row);\n        row = row.reverse();\n\n        for (let r = 0; r < this.state.length; r++) {\n          newState[r][c] = row[r];\n        }\n      }\n\n      if (this.checkPossibilityOfMerging(newState)) {\n        this.state = [...newState];\n        this.checkIsWin();\n        this.putNewGameNumber();\n      }\n\n      this.checkStatusLose(newState);\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.Status.playing;\n    this.putNewGameNumber();\n    this.putNewGameNumber();\n  }\n\n  restart() {\n    this.score = 0;\n    this.status = Game.Status.idle;\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n  }\n\n  checkIsWin() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 2048) {\n          this.status = Game.Status.win;\n\n          return;\n        }\n      }\n    }\n  }\n\n  checkPossibilityOfMerging(newState) {\n    return JSON.stringify(this.state) !== JSON.stringify(newState);\n  }\n\n  checkPossibilityOfMoving() {\n    const lengthOfArray = this.state.length;\n\n    for (let i = 0; i < lengthOfArray; i++) {\n      for (let j = 0; j < lengthOfArray; j++) {\n        if (\n          j < lengthOfArray - 1 &&\n          this.state[i][j] === this.state[i][j + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          i < lengthOfArray - 1 &&\n          this.state[i][j] === this.state[i + 1][j]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkStatusLose() {\n    if (this.getEmptyCells().length === 0 && !this.checkPossibilityOfMoving()) {\n      this.status = Game.Status.lose;\n    }\n  }\n\n  move(row) {\n    const fillRow = row.filter((num) => num !== 0);\n\n    for (let i = 0; i < fillRow.length - 1; i++) {\n      if (fillRow[i] === fillRow[i + 1]) {\n        fillRow[i] *= 2;\n        fillRow[i + 1] = 0;\n        this.score += fillRow[i];\n      }\n    }\n\n    const newFillRow = fillRow.filter((num) => num !== 0);\n\n    while (newFillRow.length < 4) {\n      newFillRow.push(0);\n    }\n\n    return newFillRow;\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  putNewGameNumber() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length !== 0) {\n      const getRandomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n      const row = emptyCells[getRandomEmptyCell][0];\n      const column = emptyCells[getRandomEmptyCell][1];\n\n      this.state[row][column] = Math.random() >= 0.9 ? 4 : 2;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","Status","idle","playing","win","lose","constructor","initialState","status","state","JSON","parse","stringify","score","moveLeft","getStatus","newState","r","length","row","move","checkPossibilityOfMerging","checkIsWin","putNewGameNumber","checkStatusLose","moveRight","reverse","moveUp","map","Array","fill","c","moveDown","getScore","getState","start","restart","i","j","checkPossibilityOfMoving","lengthOfArray","getEmptyCells","fillRow","filter","num","newFillRow","push","emptyCells","getRandomEmptyCell","Math","floor","random","column","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$updateGameField","cells","rows","querySelectorAll","children","forEach","cell","currentCell","className","innerHTML","addEventListener","e","classList","contains","replace","textContent","add","remove","key"],"version":3,"file":"index.087de41b.js.map"}